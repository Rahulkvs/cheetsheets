===========environment=================

turn syntax on
:syntax on

To display line numbers along the left side of a window, type any one of the following command while using text editor:
:set number

or
:set nu

To turn off line number again enter the same command:
:set nu!

To turn off vims indenting when pasting 
:set paste

=======================add a word to spell file==================

Type this over the highlighted word
zg

==========navigation==================
G
To move to end of file just type G (press ESC and type capital G):

1G
OR
gg
You can jump back to beginning of file by typing any one of the following command

700G
You can jump to line number 700 (press ESC type 700G)

w 
Move forward to the beginning of a word.
3w 
Move forward three words.
b 
Move backward to the beginning of a word.
3b 
Move backward three words.
$ 
Move to the end of the line.
0 
Move to the beginning of the line.
^ 
Move to the first non-blank character of the line.
======================edittig==========================
dG
delete everything after coursor

==========searching====================

The :substitute command searches for a text pattern, and replaces it with a text string. 

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.
:s/foo/bar/g
Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.
:%s/foo/bar/gc
Change each 'foo' to 'bar', but ask for confirmation first.
:%s/\<foo\>/bar/gc
Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.
:%s/foo/bar/gci
Change each 'foo' (case insensitive) to 'bar'; ask for confirmation.
This may be wanted after using :set noignorecase to make searches case sensitive (the default).
:%s/foo/bar/gcI
Change each 'foo' (case sensitive) to 'bar'; ask for confirmation.
This may be wanted after using :set ignorecase to make searches case insensitive.

------------alternative syntax---------------
For url's you can use a different deliminator

#','
:%s,foo/bar/baz,foo/bar/boz,g 

OR

#':'
%s:old/old:/old/new:g

==========undo=================================================

u: undo last change (can be repeated to undo preceding commands)
Ctrl-R: Redo 

=========================REGISTERS================================

I was pleased when I discovered the 0 register. If you yank text without assigning it to a particular register, 
then it will be assigned to the 0 register, as well as being saved in the default " register. 
The difference between the 0 and " registers is that 0 is only populated with yanked text,
whereas the default register is also populated with text deleted using d/D/x/X/c/C/s/S commands.

I find this useful when I want to copy some text, delete something and replace it with the copied text. 
The following steps illustrate an example:

To access a register user the character " so th efirst register is accessed by ""
Yank the text you want to copy with y - this text is saved in " and 0 registers
Delete the text you want to replace with d - this text is saved in " register
Paste the yanked text with "0p


There are nine types of registers:
1. The unnamed register ""
2. 10 numbered registers "0 to "9
3. The small delete register "-
4. 26 named registers "a to "z or "A to "Z
5. four read-only registers ":, "., "% and "#
6. the expression register "=
7. The selection and drop registers "*, "+ and "~ 
8. The black hole register "_
9. Last search pattern register "/


Most used registers
-------------------
1. Unnamed register ""
Vim fills this register with text deleted with the "d", "c", "s", "x" commands
or copied with the yank "y" command,

2. Numbered registers "0 to "9
Vim fills these registers with text from yank and delete commands.
Numbered register 0 contains the text from the most recent yank command,
Numbered register 1 contains the text deleted by the most recent delete or change command
With each successive deletion or change, Vim shifts the previous contents of register 1 into register 2,
2 into 3, and so forth, losing the previous contents of register 9.



4. Named registers "a to "z or "A to "Z		
Vim fills these registers only when you say so.

When I'm working I sometimes find myself rearranging code, but I don't want to lose it and may want
to paste it multiple times. This is the perfect time to use a named register to store chunks of code.

Typing "ayy will yank the current line into register a. 
Typing "ap will put it somewhere else.

5. Read-only registers ":, "., "% and "#
The . register stores what I just typed
"%	Contains the name of the current file.
"#	Contains the name of the alternate file
":	Contains the most recent executed command-line

7. Selection and drop registers "*, "+ and "~ 
The * register is my system clipboard

The read-only "~ register stores the dropped text from the last drag'n'drop
operation.

Viminfo
-------
What's even more amazing about registers is they're stored in ~/.viminfo.
That means when Vim has been quit and then loaded again, all of the populated registers will still be available.

Acessing in insert mode
-----------------------
ctrl+r let go then follwed by the register lets you paste the contents of a register without leaving insert mode.

Ctrl + r then " Put from the default register

Ctrl + r then d Put from register d

Ctrl + r then 0 Put from register 0



===================ADVANCED=======================
--------------------macros------------------------

Let's say you are dealing with a tab-delimited value file as such:

    ID  Df  %Dev    Lambda
    1   0   0.000000    0.313682
    2   1   0.023113    0.304332
    3   1   0.044869    0.295261
    4   1   0.065347    0.286460
    5   1   0.084623    0.277922
    6   1   0.102767    0.269638
    7   1   0.119845    0.261601
Now you decide that you need to add a percentage sign at the end of the %Dev field.
We'll make a simple macro in the (arbitrarily selected) m register as follows:

qm

EE: Go to the end of the 3rd column.

a: Insert mode to append to the end of this column.

%: Type the percent sign we want to add.

<ESC>: Get back into command mode.

j0: Go to beginning of next line.

q: Stop recording macro

We can now just type @m to run this macro on the current line. Furthermore, we can type 100@m to do this 100 times! Life's looking pretty good.

At this point you should be saying, "BUT WAIT, WHAT THE HECK DOES THIS HAVE TO DO WITH REGISTERS?"

Excellent point. Let's investigate what is in the contents of the m register by typing "mp. We then get the following:

    EEa%<ESC>j0
At first this looks like you accidentally opened a binary file in notepad, but upon second glance, it's the exact sequence of characters in our macro!

You are a curious person, so let's do something interesting and edit this line of text to insert a "!" instead of boring old "%".

    EEa!<ESC>j0
Then let's yank this into the n register by typing B"nyE. Then, just for kicks, let's run the n macro on a line of our data using @n....

OMG, IT ADDED A "!"

Essentially, running a macro is like pressing the exact sequence of keys in that macro's register. If that isn't a cool register trick, I'll eat my hat.

-----
================recording=============
You start recording by q<letter> and you can end it by typing q again.

Recording is a really useful feature of Vim.

It records everything you type. You can then replay it simply by typing @<letter>. 
Record search, movement, replacement...

