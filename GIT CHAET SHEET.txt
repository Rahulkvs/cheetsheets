------cycle for adding canges-------
git status	  
# check for outstanding changes

git add -A .  
#where the dot stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included.The files listed here are in the Staging Area, and they are not in our repository yet

git commit -m 'comment here'  
#To store our staged changes we run the commit command with a message describing what we've changed

git push	 
OR
git push -u origin master
# The name of our remote is origin and the default local branch name is master. The -u tells Git to remember the parameters, so that next time we can simply run git push and Git will know what to do

------------
git init  #initialises a repo in that directory
git remote add origin https://github.com/try-git/try_git.git #add the destination of your new initialised local git repo

git clone https://github.com/Tawanda-m/cheetsheets.git 
# no need for git init this creates the directory for you


----------undoing stuff-------

git reset <filename> 

# to remove a file or files from the staging area.

git checkout -- octocat.txt

#Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>. 

git rm '*.txt'

#git rm command which will not only remove the actual files from disk, but will also stage the removal of the files for us.




-----------------BRANCHING---see also conflict resolution below-----------------------

git branch gitcheat  	#make the new branch
git branch			 	#shows all the local branches
git checkout gitcheat	
#You can switch branches using the git checkout <branch> command. (all your files will be different and maintained when switching between branches which is super cool)

git add . 				#make chnages and add them
git commit -m 'message text' #commit

git checkout master		#go back to master
git merge gitcheat		#merge changes if conflict read below




=========
IF YOU GET A CONFLICT BECAUSE A FIE ON MASTER WILL BE OVERWRITTEN:
=========

You can't merge with local modifications. Git protects you from losing important changes. You have three options. 

1)
One is to commit the change using

git commit -m "My message"


2)
The second is to stash it. stashing acts as a stack, where you can push changes, and you pop them in reverse order.

To stash type:

git stash

git merge branchname 
#then Do the merge 

git stash pop 
# pull the stash, this is like a pull and will(hopefully) merge the conflicts in the file in question

3)
The third options is to discard the local changes using 

git reset --hard.

###########################By default git stash will not stash files for which there are no history. So if you have files which you have not yet added but which would be overwritten or "created" by the merge, then the merge will still block. In that situation, you can use git stash -u to stash uncommitted files too. Or you can just delete them!#######################################3



=================APPENDIX======================================
git init

: Initializes a new Git repository. Until you run this command inside a repository or directory, it’s just a regular folder. Only after you input this does it accept further Git commands.

git config

: Short for “configure,” this is most useful when you’re setting up Git for the first time.

git help

: Forgot a command? Type this into the command line to bring up the 21 most common git commands. You can also be more specific and type “git help init” or another term to figure out how to use and configure a specific git command.

git status

: Check the status of your repository. See which files are inside it, which changes still need to be committed, and which branch of the repository you’re currently working on.

git add

: This does not add new files to your repository. Instead, it brings new files to Git’s attention. After you add files, they’re included in Git’s “snapshots” of the repository.

git commit

: Git’s most important command. After you make any sort of change, you input this in order to take a “snapshot” of the repository. Usually it goes git commit -m “Message here.” The -m indicates that the following section of the command should be read as a message.

git branch

: Working with multiple collaborators and want to make changes on your own? This command will let you build a new branch, or timeline of commits, of changes and file additions that are completely your own. Your title goes after the command. If you wanted a new branch called “cats,” you’d type git branch cats.

git checkout

: Literally allows you to “check out” a repository that you are not currently inside. This is a navigational command that lets you move to the repository you want to check. You can use this command as git checkout master to look at the master branch, or git checkout cats to look at another branch.

git merge

: When you’re done working on a branch, you can merge your changes back to the master branch, which is visible to all collaborators. git merge cats would take all the changes you made to the “cats” branch and add them to the master.

git push

: If you’re working on your local computer, and want your commits to be visible online on GitHub as well, you “push” the changes up to GitHub with this command.

git pull

: If you’re working on your local computer and want the most up-to-date version of your repository to work with, you “pull” the changes down from GitHub with this command.

-----------------------














